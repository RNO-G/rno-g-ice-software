//RADIANT configuration
radiant:
{
	//Scalers configuration
	scalers:
	{
		//use pps, otherwise period is used
		use_pps=1;
		//The period used for scalers if pps is not enabled
		period=1;
		//The prescaler minus 1 for each channel
		prescal_m1=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
	};

	//Threshold initialization configuration
	thresholds:
	{
		//1 to load from threshold file, otherwise initial values will be used
		load_from_threshold_file=1;
		//Initial thresholds if not loaded from file (in V)
		initial=[1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05];
		//Minimum allowed threshold, in V
		min=0.5;
		//Maximum allowed threshold, in V
		max=1.45;
	};

	//Threshold servo configuration
	servo:
	{
		//Enable servoing
		enable=1;
		//Time interval (in seconds) that scalers are updated at
		scaler_update_interval=0.5;
		//Time interval (in seconds) that thresholds are updated at
		servo_interval=1;
		//Multiple time periods may be considered in servoing. This sets the length of each time period (3 periods must be defined)
		nscaler_periods_per_servo_period=[1,2,3];
		//The weights of the aforementioned periods. For scaler goal to mean something sensible, these should add to 1.
		period_weights=[1,0,0];
		//The scaler goal for each channel (calculated as the weighted contribution of periods)
		scaler_goals=[5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,5,5,5];
		//The maximum amount the threshold can change by in each step
		max_thresh_change=0.01;
		//servo PID loop P
		P=5;
		//servo PID loop I
		I=0;
		//servo PID loop D
		D=0;
		//Maximum allowed error sum (in Hz)
		max_sum_err=10000;
	};

	//Trigger configuration
	trigger:
	{
		//Software trigger configuration
		soft:
		{
			//Enable soft trigger
			enabled=1;
			//Use exponential distribution of inter-soft trigger timing
			use_exponential_distribution=0;
			//Soft trigger interval
			interval=10;
			//Jitter (uniform) on soft trigger interval
			interval_jitter=0;
			//Enable output for soft trigger
			output_enabled=0;
		};

		//External (Low-threshold!) trigger configuration
		ext:
		{
			//Enable ext trigger (note: this is the low threshold trigger!)
			enabled=1;
		};

		//PPS trigger configuration
		pps:
		{
			//Enable pps trigger
			enabled=0;
			//Enable pps trigger output
			output_enabled=0;
		};

		//First RF trigger configuration
		RF0:
		{
			//Enable this RF trigger
			enabled=1;
			//Mask of channels that go into this trigger
			mask=0x1ff000;
			//The time widow (in ns) for the coincidnce  trigger
			window=30;
			//Number of coincidences (min 1) in this coincidence trigger
			num_coincidences=1;
		};

		//Second RF trigger configuration
		RF1:
		{
			//Enable this RF trigger
			enabled=0;
			//Mask of channels that go into this trigger
			mask=0xf;
			//The time widow (in ns) for the coincidnce  trigger
			window=30;
			//Number of coincidences (min 1) in this coincidence trigger
			num_coincidences=2;
		};

		//Enable clear mode (don't...)
		clear_mode=0;
		//Enable trigger output
		output_enabled=1;
	};

	//Readout settings for the RADIANT
	readout:
	{
		//Mask of channels to read (0xffffff for all)
		readout_mask=0xffffff;
		//The number of 1024-sample buffers per readout. Use 1 or 2...
		nbuffers_per_readout=2;
		//Timeout in ms for gpio poll (higher reduces CPU, but reduces soft trigger granularity
		poll_ms=10;
	};

	//Pedestal settings for RADIANT
	pedestals:
	{
		//Compute pedestals at start of run
		compute_at_start=1;
		//Number of triggers used to compute pedetsal
		ntriggers_per_computation=512;
		//Apply attenuation when computing pedestals
		apply_attenuation=0;
		//Amount of attenuation to apply when computing pedestals
		attenuation=0;
		//File to load / store pedestals from / to
		pedestal_file="/rno-g/var/peds.dat";
		//Subtract pedestals from waveforms
		pedestal_subtract=1;
	};

	//Analog settings for the RADIANT
	analog:
	{
		//Apply lab4 vbias at beginning of run (instead of using whatever it is)
		apply_lab4_vbias=1;
		//The lab3 vbias (in V) to apply
		lab4_vbias=[1.5,1.5];
		//Apply diode vbias at beginning of run (instead of using whatever it is)
		apply_diode_vbias=0;
		//The diode vbias (in V) to apply
		diode_vbias=[1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25];
		//Apply attenuations to digitizer/trigger paths
		apply_attenuations=0;
		//Digitizer path attenuations (dB)
		digi_attenuation=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
		//Trigger path attenuations (dB)
		trig_attenuation=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
		//Time to wait after setting analog params
		settle_time=0.5;
	};

	//RADIANT other device settings
	device:
	{
		//Script to reset the radiant (not implemented yet)
		reset_script="/rno-g/bin/reset-radiant";
		//SPI device for RADIANT DMA
		spi_device="/dev/spidev0.0";
		//UART device for RADIANT comms
		uart_device="/dev/ttyRadiant";
		//gpio to poll on
		poll_gpio=46;
		//gpio to enable gpio (negative for active low)
		spi_enable_gpio=-61;
	};

	//RADIANT pps settings
	pps:
	{
		//Use internal PPS instead of from GPS
		use_internal=0;
		// Enable sync out
		sync_out=0;
		//Amount of PPS holdoff (in some units...)
		pps_holdoff=10;
	};

};

//Settings for the low-threshold (FLOWER) board
lt:
{
	//Trigger settings for the low-threshold-board
	trigger:
	{
		//Enable the LT trigger
		enable=1;
		// Vpp threshold  (max 255)
		vpp=1;
		//Minimum coincidence threshold for channels (minmum 1)
		min_coincidence=2;
		//Coincidence window
		window=5;
	};

	//Threshold settings for the low-threshold board
	thresholds:
	{
		//Load thresholds from threshold file (if available)
		load_from_threshold_file=1;
		//Initial thresholds if not loaded from file (in adc)
		initial=[30,30,30,30];
	};

	//Servo setings for the low-threshold board
	servo:
	{
		//Enable servoing
		enable=1;
		//Subtract gated scalers
		subtract_gated=0;
		//
		scaler_goals=[2500,2500,2500,2500];
		//
		servo_thresh_frac=0.95;
		//
		servo_thresh_offset=0;
		//
		fast_scaler_weight=0.3;
		//
		slow_scaler_weight=0.7;
		//
		scaler_update_interval=0.5;
		//
		servo_interval=1;
		//
		P=0.0002;
		//
		I=0;
		//
		D=0;
	};

	//
	gain:
	{
		//
		auto_gain=1;
		//
		target_rms=5;
		//
		fixed_gain_codes=[5,5,5,5];
	};

	//
	device:
	{
		//
		spi_device="/dev/spidev1.0";
		//
		spi_enable_gpio=0;
	};

};

//Runtime settings
runtime:
{
	//
	status_shmem_file="/rno-g/run/daqstatus.dat";
	//
	acq_buf_size=256;
	//
	mon_buf_size=128;
};

//Output settings
output:
{
	//
	base_dir="/data/daq/";
	//
	runfile="/rno-g/var/runfile";
	//
	comment="";
	//
	daqstatus_interval=1;
	//
	seconds_per_run=7200;
	//
	max_events_per_file=100;
	//
	max_daqstatuses_per_file=100;
	//
	max_seconds_per_file=60;
	//
	max_kB_per_file=0;
	//Minimum free space on the partition where data gets stored. 
	min_free_space_MB_output_partition=512;
	//Minimum free space on the partition where the runfile gets stored
	min_free_space_MB_runfile_partition=64;
	//Allow overwriting output directories (only effective if there's a runfile)
	allow_rundir_overwrite=0;
	//
	print_interval=5;
};

